#!/usr/bin/env python

# Copyright (C) 2022-2025 Simon Crase

# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This software is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU Emacs.  If not, see <http://www.gnu.org/licenses/>.

'''Visualize data generated by exercise_2_3.py'''

from argparse import ArgumentParser
from os.path import basename, join, splitext
from time import time
from matplotlib import rc
from matplotlib.pyplot import figure, show
import numpy as np
from md import reload,get_path_to_config

def get_file_name(name,default_ext='png',seq=None):
    '''
    Used to create file names

    Parameters:
        name          Basis for file name
        default_ext   Extension if non specified
        seq           Used if there are multiple files
    '''
    base,ext = splitext(name)
    if len(ext) == 0:
        ext = default_ext
    if seq != None:
        base = f'{base}{seq}'
    qualified_name = f'{base}.{ext}'
    if ext == 'png':
        return join(args.figs,qualified_name)
    else:
        return qualified_name


def parse_arguments():
    parser = ArgumentParser(description = __doc__)
    parser.add_argument('--file', default='exercise_2_3_.npz',help = 'Name of saved file')
    parser.add_argument('--show', action = 'store_true', help   = 'Show plot')
    parser.add_argument('-o', '--out', default = basename(splitext(__file__)[0]),help='Name of output file')
    parser.add_argument('--figs', default = './figs', help = 'Name of folder where plots are to be stored')
    parser.add_argument('--folder',default = 'configs', help= 'Folder to store config files')
    return parser.parse_args()



def create_energies(Vs):
    m,_ = Vs.shape
    Es = np.empty((m))
    for i in range(m):
        Es[i] = 0.5 * np.sum(Vs[i,:]**2)
    return Es

if __name__=='__main__':
    rc('font',**{'family':'serif','serif':['Palatino']})
    rc('text', usetex=True)
    start  = time()
    args = parse_arguments()
    file,_ = get_path_to_config(file_patterns = args.file,folder = args.folder,increment=0)
    Xs, Vs, epoch,n_collisions,d,L,sigma = reload(file,folder=None)
    Es = create_energies(Vs)

    fig = figure(figsize = (12,12))

    ax1 = fig.add_subplot(2,2,1)
    ax1.hist(Es,bins=100,color='blue',density=True)
    ax1.set_xlabel('$E$')
    ax1.set_title('Energies')

    ax2 = fig.add_subplot(2,2,2)
    ax2.hist(Xs[:,0],bins=100,color='blue',density=True)
    ax2.set_xlabel('$x$')
    ax2.set_title('Positions')

    ax3 = fig.add_subplot(2,2,3)
    ax3.hist(Xs[:,1],bins=100,color='blue',density=True)
    ax3.set_xlabel('$y$')
    ax3.set_title('Positions')

    ax4 = fig.add_subplot(2,2,4)
    if d == 3:
        ax4.hist(Xs[:,2],bins=100,color='blue',density=True)
        ax4.set_xlabel('$z$')
        ax4.set_title('Positions')
    else:
        ax4.scatter(Xs[:,0],Xs[:,1],color='blue',s=10)
        ax4.quiver(Xs[:,0],Xs[:,1],Vs[:,0],Vs[:,1],color='red',width=0.005)
        ax4.set_xlabel('$x$')
        ax4.set_ylabel('$y$')
        ax4.set_title('Positions and Velocities')

    fig.suptitle(fr'{args.file}: Epoch={epoch}, L={L}, $\sigma=${sigma}, n={len(Es)}')
    fig.tight_layout(h_pad=5,pad=2)
    fig.savefig(get_file_name(args.out))

    elapsed = time() - start
    minutes = int(elapsed/60)
    seconds = elapsed - 60*minutes
    print (f'Elapsed Time {minutes} m {seconds:.2f} s')

    if args.show:
        show()
